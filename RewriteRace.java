/**
 * Race class
 * Class Race maakt gebruik van de class Paard
 * 
 * @author Martijn van der Bruggen
 * @version alpha - aanroep van cruciale methodes ontbreekt
 * (c) 2009 Hogeschool van Arnhem en Nijmegen
 * 
 * Note: deze code is bewust niet op alle punten generiek
 * dit om nog onbekende constructies te vermijden.
 *
 * Updates
 * 2010: verduidelijking van opdrachten in de code MvdB
 * 2011: verbetering leesbaarheid code MvdB
 * 2012: verbetering layout code en aanpassing commentaar MvdB
 * 2013: commentaar aangepast aan nieuwe opdracht MvdB
 * 
 *************************************************
 * Afvinkopdracht: werken met methodes en objecten
 *************************************************
 * Opdrachten zitten verwerkt in de code
 * 1) Declaratie constante
 * 2) Declaratie van Paard (niet instantiering)
 * 3) Declareer een button
 * 4) Zet breedte en hoogte van het frame
 * 5) Teken een finish streep
 * 6) Creatie van 4 paarden
 * 7) Pauzeer
 * 8) Teken 4 paarden
 * 9) Plaats tekst op de button
 * 10) Start de race, methode aanroep
 */
package com.maventest.afvink3course5paard;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.Arrays;
import javax.imageio.ImageIO;
import javax.swing.JOptionPane;

/**
 *  >>>> Herschreven met GUI Builder, maakt voor makkelijker testen. <<<<
 */
public class RewriteRace extends javax.swing.JFrame {

    /**
     * Creates new form RewriteRace
     */
    public RewriteRace() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        RacePanel = new javax.swing.JPanel();
        RunButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        RacePanel.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout RacePanelLayout = new javax.swing.GroupLayout(RacePanel);
        RacePanel.setLayout(RacePanelLayout);
        RacePanelLayout.setHorizontalGroup(
            RacePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        RacePanelLayout.setVerticalGroup(
            RacePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 200, Short.MAX_VALUE)
        );

        RunButton.setText("Run");
        RunButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RunButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(RacePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(RunButton)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(RacePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(RunButton)
                .addContainerGap(49, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void RunButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RunButtonActionPerformed
        // Button action code
        ButtonPresses++;
        Graphics paper = RacePanel.getGraphics();
        if (!ButtonPressed){
            startRace(paper);}
        ButtonPressed = true;
        
        if(ButtonPresses % 2 == 0){
            RunButton.setText("Continue...");
            Able_to_Run = false;
            RaceAndSuch.interrupt();
            
        }else{
            RunButton.setText("Pause...");
            if (ButtonPresses != 1){
                Able_to_Run = true;
                System.out.println("else");
                startRace(paper);
            }
        }   
    }//GEN-LAST:event_RunButtonActionPerformed
    
    private void startRace(Graphics g) {
        backgroundReset(g);
        
        // Laden van de paard images
        try {Image_paard1 = ImageIO.read(new File("D:\\School\\Java\\PaardRood.jpg"));} catch (IOException ex) {System.out.println("Image not found");;}
        try {Image_paard2 = ImageIO.read(new File("D:\\School\\Java\\PaardBlauw.jpg"));} catch (IOException ex) {System.out.println("Image not found");;}
        try {Image_paard3 = ImageIO.read(new File("D:\\School\\Java\\PaardGroen.jpg"));} catch (IOException ex) {System.out.println("Image not found");;}
        try {Image_paard4 = ImageIO.read(new File("D:\\School\\Java\\PaardGeel.jpg"));} catch (IOException ex) {System.out.println("Image not found");;}
        try {Image_paard5 = ImageIO.read(new File("D:\\School\\Java\\PaardPaars.jpg"));} catch (IOException ex) {System.out.println("Image not found");;}

        /** Loop tot een paard over de finish is */
        
        RaceAndSuch = new Thread(){ // Thread voor de while loop zodat deze het scherm niet vast laat lopen
            @Override
            public void run(){
                
                while (h1.getAfstand() < lengte && h2.getAfstand() < lengte && h3.getAfstand() < lengte && h4.getAfstand() < lengte && h5.getAfstand() < lengte && Able_to_Run){

                    h1.competition(); 
                    h2.competition(); 
                    h3.competition(); 
                    h4.competition(); 
                    h5.competition();
                    
                    pause(100);
                    
                    backgroundReset(g);
                    tekenen(g);
                    
                    // Winnaars
                    if (h1.getAfstand() >= lengte){WinPa++;RunButton.setText("Race finished");}
                    if (h2.getAfstand() >= lengte){WinPa++;RunButton.setText("Race finished");}
                    if (h3.getAfstand() >= lengte){WinPa++;RunButton.setText("Race finished");}
                    if (h4.getAfstand() >= lengte){WinPa++;RunButton.setText("Race finished");}
                    if (h5.getAfstand() >= lengte){WinPa++;RunButton.setText("Race finished");}  

                } // End while loop
                Einde();
            }
            private void pause(int msec){
                try {
                    Thread.sleep(msec);
                } catch (InterruptedException ex) {
                    System.out.println(ex);
                }
            }   
        };
        RaceAndSuch.start();
    }
    
    private void tekenen(Graphics g){
        
        tekenPaard(g, h1, Image_paard1);
        tekenPaard(g, h2, Image_paard2);
        tekenPaard(g, h3, Image_paard3);
        tekenPaard(g, h4, Image_paard4);
        tekenPaard(g, h5, Image_paard5);
    }

    
    /** Teken het paard */
    private void tekenPaard(Graphics g, Paard h, BufferedImage ImgP) {
        g.drawImage(ImgP, h.getAfstand(), 30*h.getPaardNummer(), 24, 24, this);
    }
    
    private void backgroundReset(Graphics g){  
        
        boolean odd = true;
        g.setColor(Color.white);
        g.fillRect(0, 0, RacePanel.getWidth(), RacePanel.getHeight());
        
        g.setColor(Color.black);
        g.drawLine(afstandF-1, 0, afstandF-1, RacePanel.getHeight());
        g.drawLine(afstandF+12, 0, afstandF+12, RacePanel.getHeight());
        
        for(int d = 0; d < 4; d++){
            odd = true;
            if(d == 1 | d == 3){odd = false;}
        
            for(int i = 0; i < 210; i += 3){
                if(odd){
                    odd = false;
                    g.setColor(Color.black);
                    g.fillRect(afstandF+(3*d), i, 3, i+3);
                    
                }else{
                    odd = true;
                    g.setColor(Color.white);
                    g.fillRect(afstandF+(3*d), i, 3, i+3);
                }
            }
        }
    }
    
    private void Einde(){
        if (WinPa > 1){
            int[] values = {h1.getAfstand(),h2.getAfstand(),h3.getAfstand(),h4.getAfstand(),h5.getAfstand()};
            Integer[] valuesI = {h1.getAfstand(),h2.getAfstand(),h3.getAfstand(),h4.getAfstand(),h5.getAfstand()};
            int indexOf = Arrays.asList(valuesI).indexOf(Arrays.stream(values).max().getAsInt());
            
            if(indexOf == 0){JOptionPane.showMessageDialog(null, "Bij de foto finish heeft "+h1.getNaam() + " gewonnen!");}
            if(indexOf == 1){JOptionPane.showMessageDialog(null, "Bij de foto finish heeft "+h2.getNaam() + " gewonnen!");}
            if(indexOf == 2){JOptionPane.showMessageDialog(null, "Bij de foto finish heeft "+h3.getNaam() + " gewonnen!");}
            if(indexOf == 3){JOptionPane.showMessageDialog(null, "Bij de foto finish heeft "+h4.getNaam() + " gewonnen!");}
            if(indexOf == 4){JOptionPane.showMessageDialog(null, "Bij de foto finish heeft "+h5.getNaam() + " gewonnen!");}
            
        }else{
            if (h1.getAfstand() >= lengte){JOptionPane.showMessageDialog(null, h1.getNaam() + " heeft gewonnen!");}
            if (h2.getAfstand() >= lengte){JOptionPane.showMessageDialog(null, h2.getNaam() + " heeft gewonnen!");}
            if (h3.getAfstand() >= lengte){JOptionPane.showMessageDialog(null, h3.getNaam() + " heeft gewonnen!");}
            if (h4.getAfstand() >= lengte){JOptionPane.showMessageDialog(null, h4.getNaam() + " heeft gewonnen!");}
            if (h5.getAfstand() >= lengte){JOptionPane.showMessageDialog(null, h5.getNaam() + " heeft gewonnen!");}    
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RewriteRace.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RewriteRace.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RewriteRace.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RewriteRace.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RewriteRace().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel RacePanel;
    private javax.swing.JButton RunButton;
    // End of variables declaration//GEN-END:variables
    private final int lengte = 250;
    private Paard h1 = new Paard("One", Color.red);
    private Paard h2 = new Paard("Two", Color.blue);
    private Paard h3 = new Paard("Three", Color.green);
    private Paard h4 = new Paard("Four", Color.yellow);
    private Paard h5 = new Paard("Five", Color.MAGENTA);
    
    private BufferedImage Image_paard1,Image_paard2,Image_paard3,Image_paard4,Image_paard5; 
    private int WinPa = 0; // Winnaars(?) 
    
    private boolean ButtonPressed = false;
    private boolean Able_to_Run = true;
    private int ButtonPresses = 0;
    private int afstandF = lengte + 24;
    
    private Thread RaceAndSuch;
}